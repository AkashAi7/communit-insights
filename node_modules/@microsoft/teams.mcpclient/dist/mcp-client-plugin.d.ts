import { ClientOptions } from '@modelcontextprotocol/sdk/client/index.js';
import { ChatPromptPlugin, Function } from '@microsoft/teams.ai';
import { ILogger } from '@microsoft/teams.common';
import { McpClientPluginUseParams, McpClientPluginCachedValue, McpClientPluginOptions, McpClientPluginParams } from './mcp-client-types.js';
import '@modelcontextprotocol/sdk/shared/transport.js';

declare class McpClientPlugin implements ChatPromptPlugin<'mcpClient', McpClientPluginUseParams> {
    readonly name = "mcpClient";
    get mcpClientName(): string;
    protected readonly _name: string;
    get version(): string;
    protected readonly _version: string;
    get clientOptions(): ClientOptions;
    protected _clientOptions: ClientOptions;
    get cache(): Record<string, McpClientPluginCachedValue & {
        lastAttemptedFetch?: number;
    }>;
    protected _cache: Record<string, McpClientPluginCachedValue & {
        lastAttemptedFetch?: number;
    }>;
    get log(): ILogger;
    protected readonly _log: ILogger;
    get refetchTimeoutMs(): number;
    protected _refetchTimeoutMs: number;
    private readonly _mcpServerUrlsByParams;
    private createTransport;
    constructor(options?: McpClientPluginOptions);
    onUsePlugin(args: {
        url: string;
        params?: McpClientPluginParams;
    }): void;
    onBuildFunctions(incomingFunctions: Function[]): Promise<Function[]>;
    private fetchToolsIfNeeded;
    private getTools;
    private fetchTools;
    private makeMcpClient;
}

export { McpClientPlugin };
