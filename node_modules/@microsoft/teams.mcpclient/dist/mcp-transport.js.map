{"version":3,"sources":["../src/mcp-transport.ts"],"names":["SSEClientTransport","headers"],"mappings":";;;;AAOA,eAAsB,uBAAA,CACpB,KACA,OAC6B,EAAA;AAC7B,EAAA,MAAM,kBAAkB,OAAO,OAAA,KAAY,UAAa,GAAA,MAAM,SAAY,GAAA,OAAA;AAG1E,EAAA,OAAO,IAAIA,yBAAA,CAAmB,IAAI,GAAA,CAAI,GAAG,CAAG,EAAA;AAAA,IAC1C,WAAa,EAAA;AAAA,MACX,OAAS,EAAA;AAAA,QACP,GAAG;AAAA;AACL,KACF;AAAA,IACA,eAAiB,EAAA;AAAA,MACf,KAAA,CAAM,OAA+B,IAAoB,EAAA;AACvD,QAAMC,MAAAA,QAAAA,GAAU,IAAI,OAAQ,CAAA;AAAA,UAC1B,GAAG,eAAA;AAAA,UACH,GAAG,IAAM,EAAA;AAAA,SACV,CAAA;AACD,QAAA,OAAO,MAAM,KAAO,EAAA;AAAA,UAClB,GAAG,IAAA;AAAA,UACH,OAAAA,EAAAA;AAAA,SACD,CAAA;AAAA;AACH;AACF,GACD,CAAA;AACH","file":"mcp-transport.js","sourcesContent":["import { SSEClientTransport } from '@modelcontextprotocol/sdk/client/sse.js';\n\nimport { ValueOrFactory } from './mcp-client-types';\n\n/**\n * Creates an SSE client transport with the given URL and headers\n */\nexport async function buildSSEClientTransport(\n  url: string,\n  headers: ValueOrFactory<Record<string, string>> | undefined\n): Promise<SSEClientTransport> {\n  const resolvedHeaders = typeof headers === 'function' ? await headers() : headers;\n  // We need to include headers like this because of\n  // https://github.com/modelcontextprotocol/typescript-sdk/issues/118\n  return new SSEClientTransport(new URL(url), {\n    requestInit: {\n      headers: {\n        ...resolvedHeaders,\n      },\n    },\n    eventSourceInit: {\n      fetch(input: Request | URL | string, init?: RequestInit) {\n        const headers = new Headers({\n          ...resolvedHeaders,\n          ...init?.headers,\n        });\n        return fetch(input, {\n          ...init,\n          headers,\n        });\n      },\n    },\n  });\n}\n"]}