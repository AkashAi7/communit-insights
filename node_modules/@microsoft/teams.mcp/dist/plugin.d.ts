import { Readable, Writable } from 'stream';
import { ServerOptions } from '@modelcontextprotocol/sdk/server/index.js';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { CallToolResult } from '@modelcontextprotocol/sdk/types.js';
import { IChatPrompt } from '@microsoft/teams.ai';
import { HttpPlugin, IPlugin, IPluginStartEvent } from '@microsoft/teams.apps';
import { ILogger } from '@microsoft/teams.common';
import { DevtoolsPlugin } from '@microsoft/teams.dev';
import { IConnection } from './connection';
/**
 * MCP transport options for sse
 */
export type McpSSETransportOptions = {
    /**
     * the transport type
     */
    readonly type: 'sse';
    /**
     * the url path
     * @default /mcp
     */
    readonly path?: string;
};
/**
 * MCP transport options for stdio
 */
export type McpStdioTransportOptions = {
    /**
     * the transport type
     */
    readonly type: 'stdio';
    /**
     * stdin to use
     */
    readonly stdin?: Readable;
    /**
     * stdout to use
     */
    readonly stdout?: Writable;
};
export type McpPluginOptions = ServerOptions & {
    /**
     * the MCP server name
     * @default mcp
     */
    readonly name?: string;
    /**
     * the MCP server version
     * @default 0.0.0
     */
    readonly version?: string;
    /**
     * the MCP server description
     */
    readonly description?: string;
    /**
     * the transport or transport options
     * @default sse
     */
    readonly transport?: McpSSETransportOptions | McpStdioTransportOptions;
    /**
     * the url to use for the local
     * MCP Inspector
     * @default `http://localhost:5173`
     */
    readonly inspector?: string;
};
/**
 * High-level MCP server that provides a simpler API for working with resources, tools, and prompts.
 * For advanced usage (like sending notifications or setting custom request handlers),
 * use the underlying Server instance available via the server property.
 */
export declare class McpPlugin implements IPlugin {
    readonly logger: ILogger;
    readonly httpPlugin: HttpPlugin;
    readonly devtoolsPlugin?: DevtoolsPlugin;
    readonly server: McpServer;
    protected id: number;
    protected inspector: string;
    protected connections: Record<number, IConnection>;
    protected transport: McpSSETransportOptions | McpStdioTransportOptions;
    constructor(options?: McpServer | McpPluginOptions);
    /**
     * add a chat prompt to your server
     * @param prompt the chat prompt
     */
    use(prompt: IChatPrompt): this;
    /**
     * Pass through call to the underlying MCP server
     */
    tool(...params: Parameters<McpServer['tool']>): this;
    /**
     * Pass through call to the underlying MCP server
     */
    prompt(...params: Parameters<McpServer['prompt']>): this;
    /**
     * Pass through call to the underlying MCP server
     */
    resource(...params: Parameters<McpServer['resource']>): this;
    onInit(): void | Promise<void>;
    onStart({ port }: IPluginStartEvent): void;
    protected onInitStdio(options: McpStdioTransportOptions): Promise<void>;
    protected onInitSSE(http: HttpPlugin, options: McpSSETransportOptions): void;
    protected onToolCall(name: string, prompt: IChatPrompt): (args: any) => Promise<CallToolResult>;
    protected isCallToolResult(value: any): value is CallToolResult;
}
