"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.McpPlugin = void 0;
const mcp_js_1 = require("@modelcontextprotocol/sdk/server/mcp.js");
const sse_js_1 = require("@modelcontextprotocol/sdk/server/sse.js");
const stdio_js_1 = require("@modelcontextprotocol/sdk/server/stdio.js");
const json_schema_to_zod_1 = require("json-schema-to-zod");
const teams_apps_1 = require("@microsoft/teams.apps");
const teams_dev_1 = require("@microsoft/teams.dev");
const package_json_1 = __importDefault(require("../package.json"));
/**
 * High-level MCP server that provides a simpler API for working with resources, tools, and prompts.
 * For advanced usage (like sending notifications or setting custom request handlers),
 * use the underlying Server instance available via the server property.
 */
let McpPlugin = class McpPlugin {
    logger;
    httpPlugin;
    devtoolsPlugin;
    server;
    id = -1;
    inspector;
    connections = {};
    transport = {
        type: 'sse',
    };
    constructor(options = {}) {
        this.inspector =
            options instanceof mcp_js_1.McpServer
                ? 'http://localhost:5173'
                : options.inspector || 'http://localhost:5173';
        this.server =
            options instanceof mcp_js_1.McpServer
                ? options
                : new mcp_js_1.McpServer({
                    name: options.name || 'mcp',
                    version: options.version || '0.0.0',
                }, options);
        if (!(options instanceof mcp_js_1.McpServer) && options.transport) {
            this.transport = options.transport;
        }
    }
    /**
     * add a chat prompt to your server
     * @param prompt the chat prompt
     */
    use(prompt) {
        for (const fn of prompt.functions) {
            const schema = eval((0, json_schema_to_zod_1.jsonSchemaToZod)(fn.parameters, { module: 'cjs' }));
            this.server.tool(fn.name, fn.description, schema.shape, this.onToolCall(fn.name, prompt));
        }
        return this;
    }
    /**
     * Pass through call to the underlying MCP server
     */
    tool(...params) {
        this.server.tool(...params);
        return this;
    }
    /**
     * Pass through call to the underlying MCP server
     */
    prompt(...params) {
        this.server.prompt(...params);
        return this;
    }
    /**
     * Pass through call to the underlying MCP server
     */
    resource(...params) {
        this.server.resource(...params);
        return this;
    }
    onInit() {
        this.devtoolsPlugin?.addPage({
            name: 'mcp',
            displayName: 'MCP',
            url: this.inspector,
        });
        if (this.transport.type === 'sse') {
            return this.onInitSSE(this.httpPlugin, this.transport);
        }
        return this.onInitStdio(this.transport);
    }
    onStart({ port }) {
        if (this.transport.type === 'sse') {
            this.logger.info(`listening at http://localhost:${port}${this.transport.path || '/mcp'}`);
        }
        else {
            this.logger.info('listening on stdin');
        }
    }
    onInitStdio(options) {
        const transport = new stdio_js_1.StdioServerTransport(options.stdin, options.stdout);
        return this.server.connect(transport);
    }
    onInitSSE(http, options) {
        const path = options.path || '/mcp';
        http.get(path, (_, res) => {
            this.id++;
            this.logger.debug('connecting...');
            const transport = new sse_js_1.SSEServerTransport(`${path}/${this.id}/messages`, res);
            this.connections[this.id] = {
                id: this.id,
                transport,
                createdAt: new Date(),
            };
            this.server.connect(transport);
        });
        http.post(`${path}/:id/messages`, (req, res) => {
            const id = +req.params.id;
            const { transport } = this.connections[id];
            if (!transport) {
                res.status(401).send('unauthorized');
                return;
            }
            transport.handlePostMessage(req, res);
        });
    }
    onToolCall(name, prompt) {
        return async (args) => {
            try {
                const res = await prompt.call(name, args);
                if (this.isCallToolResult(res)) {
                    return res;
                }
                return {
                    content: [
                        {
                            type: 'text',
                            text: typeof res === 'string' ? res : JSON.stringify(res),
                        },
                    ],
                };
            }
            catch (err) {
                this.logger.error(err.toString());
                return {
                    isError: true,
                    content: [
                        {
                            type: 'text',
                            text: err.toString(),
                        },
                    ],
                };
            }
        };
    }
    isCallToolResult(value) {
        if (!!value || !('content' in value))
            return false;
        const { content } = value;
        return (Array.isArray(content) &&
            content.every((item) => 'type' in item &&
                (item.type === 'text' ||
                    item.type === 'image' ||
                    item.type === 'resource')));
    }
};
exports.McpPlugin = McpPlugin;
__decorate([
    (0, teams_apps_1.Logger)(),
    __metadata("design:type", Object)
], McpPlugin.prototype, "logger", void 0);
__decorate([
    (0, teams_apps_1.Dependency)(),
    __metadata("design:type", teams_apps_1.HttpPlugin)
], McpPlugin.prototype, "httpPlugin", void 0);
__decorate([
    (0, teams_apps_1.Dependency)({ optional: true }),
    __metadata("design:type", teams_dev_1.DevtoolsPlugin)
], McpPlugin.prototype, "devtoolsPlugin", void 0);
exports.McpPlugin = McpPlugin = __decorate([
    (0, teams_apps_1.Plugin)({
        name: 'mcp',
        version: package_json_1.default.version,
        description: [
            'High-level MCP server that provides a simpler API for working with resources, tools, and prompts.',
            'For advanced usage (like sending notifications or setting custom request handlers),',
            'use the underlying Server instance available via the server property.',
        ].join('\n'),
    }),
    __metadata("design:paramtypes", [Object])
], McpPlugin);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3BsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFHQSxvRUFBb0U7QUFDcEUsb0VBQTZFO0FBQzdFLHdFQUFpRjtBQUdqRiwyREFBcUQ7QUFJckQsc0RBTytCO0FBRS9CLG9EQUFzRDtBQUV0RCxtRUFBa0M7QUF3RWxDOzs7O0dBSUc7QUFVSSxJQUFNLFNBQVMsR0FBZixNQUFNLFNBQVM7SUFFWCxNQUFNLENBQVc7SUFHakIsVUFBVSxDQUFjO0lBR3hCLGNBQWMsQ0FBa0I7SUFFaEMsTUFBTSxDQUFZO0lBQ2pCLEVBQUUsR0FBVyxDQUFDLENBQUMsQ0FBQztJQUNoQixTQUFTLENBQVM7SUFDbEIsV0FBVyxHQUFnQyxFQUFFLENBQUM7SUFDOUMsU0FBUyxHQUFzRDtRQUN2RSxJQUFJLEVBQUUsS0FBSztLQUNaLENBQUM7SUFFRixZQUFZLFVBQXdDLEVBQUU7UUFDcEQsSUFBSSxDQUFDLFNBQVM7WUFDWixPQUFPLFlBQVksa0JBQVM7Z0JBQzFCLENBQUMsQ0FBQyx1QkFBdUI7Z0JBQ3pCLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLHVCQUF1QixDQUFDO1FBQ25ELElBQUksQ0FBQyxNQUFNO1lBQ1QsT0FBTyxZQUFZLGtCQUFTO2dCQUMxQixDQUFDLENBQUMsT0FBTztnQkFDVCxDQUFDLENBQUMsSUFBSSxrQkFBUyxDQUNiO29CQUNFLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxJQUFJLEtBQUs7b0JBQzNCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxJQUFJLE9BQU87aUJBQ3BDLEVBQ0QsT0FBTyxDQUNSLENBQUM7UUFFTixJQUFJLENBQUMsQ0FBQyxPQUFPLFlBQVksa0JBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN6RCxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFD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